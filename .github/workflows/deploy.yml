name: Deployment
on:
  issue_comment:
  workflow_dispatch:
  push:
    branches:
      - main

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  build:
    runs-on: ubuntu-latest
    if: >
      (
        github.ref == 'refs/heads/main' &&
        github.event_name != 'issue_comment'
      ) ||
      (
        github.event_name == 'issue_comment' &&
        github.event.issue.pull_request != null &&
        github.event.issue.state == 'open' &&
        startsWith(github.event.comment.body, '/dev-deploy') &&
        contains(fromJson('["48333668","30445552"]'), format('{0}', github.event.comment.user.id))
      )
    outputs:
      comment_id: ${{ steps.status_comment.outputs.comment_id }}
    steps:
      # Only runs on issue_comment
      - name: Acknowledge command (reaction)
        if: github.event_name == 'issue_comment'
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.reactions.createForIssueComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: context.payload.comment.id,
              content: 'eyes'
            });

      - name: Create status comment
        id: status_comment
        if: github.event_name == 'issue_comment'
        uses: actions/github-script@v7
        with:
          script: |
            const issue_number = context.payload.issue.number;
            const runUrl = `${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${process.env.GITHUB_RUN_ID}`;
            const prUrl = context.payload.issue.pull_request?.html_url;
            const cmd = context.payload.comment.body.trim();
            const by = context.payload.comment.user.login;

            const body = [
              `🚀 **Dev deploy requested** by @${by}`,
              prUrl ? `PR: ${prUrl}` : '',
              `Run: ${runUrl}`,
              '',
              '**Status:** 🧱 Building Docker image…',
              '',
              '- [x] Queued',
              '- [x] Started',
              '- [ ] Image built',
              '- [ ] Pushed',
              '- [ ] Deployed',
              '',
              '```',
              cmd,
              '```'
            ].filter(Boolean).join('\n');

            const { data } = await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number,
              body
            });

            core.setOutput('comment_id', String(data.id));

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.issue.number != null && format('refs/pull/{0}/head', github.event.issue.number) || github.sha }}
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Update status: image building (redundant but shows progress if checkout/setup took long)
      - name: Update status — still building
        if: github.event_name == 'issue_comment'
        uses: actions/github-script@v7
        with:
          script: |
            const comment_id = Number('${{ steps.status_comment.outputs.comment_id }}');
            const runUrl = `${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${process.env.GITHUB_RUN_ID}`;
            const body = [
              `🚀 **Dev deploy in progress**`,
              `Run: ${runUrl}`,
              '',
              '**Status:** 🧱 Building Docker image…',
              '',
              '- [x] Queued',
              '- [x] Started',
              '- [ ] Image built',
              '- [ ] Pushed',
              '- [ ] Deployed',
            ].join('\n');
            await github.rest.issues.updateComment({ owner: context.repo.owner, repo: context.repo.repo, comment_id, body });

      - name: Build Docker image
        run: |
          VERSION_TAG=$(git rev-parse --short HEAD)
          docker build --no-cache --pull -t tylovejoy/noelle:$VERSION_TAG -t tylovejoy/noelle:latest .

      - name: Update status — image built, pushing…
        if: github.event_name == 'issue_comment'
        uses: actions/github-script@v7
        with:
          script: |
            const comment_id = Number('${{ steps.status_comment.outputs.comment_id }}');
            const runUrl = `${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${process.env.GITHUB_RUN_ID}`;
            const body = [
              `🚀 **Dev deploy in progress**`,
              `Run: ${runUrl}`,
              '',
              '**Status:** 📦 Image built, pushing…',
              '',
              '- [x] Queued',
              '- [x] Started',
              '- [x] Image built',
              '- [ ] Pushed',
              '- [ ] Deployed',
            ].join('\n');
            await github.rest.issues.updateComment({ owner: context.repo.owner, repo: context.repo.repo, comment_id, body });

      - name: Push Docker image to Docker Hub
        run: |
          VERSION_TAG=$(git rev-parse --short HEAD)
          docker push tylovejoy/noelle:$VERSION_TAG
          docker push tylovejoy/noelle:latest

      - name: Update status — push complete
        if: github.event_name == 'issue_comment'
        uses: actions/github-script@v7
        with:
          script: |
            const comment_id = Number('${{ steps.status_comment.outputs.comment_id }}');
            const runUrl = `${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${process.env.GITHUB_RUN_ID}`;
            const body = [
              `🚀 **Dev deploy in progress**`,
              `Run: ${runUrl}`,
              '',
              '**Status:** ✅ Image pushed, waiting for deploy…',
              '',
              '- [x] Queued',
              '- [x] Started',
              '- [x] Image built',
              '- [x] Pushed',
              '- [ ] Deployed',
            ].join('\n');
            await github.rest.issues.updateComment({ owner: context.repo.owner, repo: context.repo.repo, comment_id, body });


  deploy_to_prod:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name != 'issue_comment'
    environment: production
    steps:

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SERVER_HOST_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      - name: Add remote host to known_hosts
        run: |
          ssh-keyscan -H ${{ secrets.SERVER_HOST_IP }} >> ~/.ssh/known_hosts

      - name: Set up Docker context for prod
        run: |
          docker context create prod-server \
            --docker "host=ssh://${{ secrets.SERVER_HOST_USER }}@${{ secrets.SERVER_HOST_IP }}" \
            --description "Prod server context"
          docker context use prod-server

      - name: Deploy to Remote Prod Server
        run: |
          VERSION_TAG=$(git rev-parse --short HEAD)
          echo "Deploying to Prod Server..."
          
          docker compose -f docker-compose.yml up -d --build --no-deps --force-recreate

        env:
          VERSION_TAG: ${{ github.sha }}
          TOKEN: ${{ secrets.TOKEN }}
  deploy_to_dev:
    runs-on: ubuntu-latest
    needs: build
    if: >
      github.event_name == 'issue_comment' &&
      github.event.issue.pull_request != null &&
      github.event.issue.state == 'open' &&
      startsWith(github.event.comment.body, '/dev-deploy') &&
      contains(fromJson('["48333668","30445552"]'), format('{0}', github.event.comment.user.id))
    environment: development
    steps:
      # (no reaction/comment creation here anymore)
  
      - name: Update status — deploying to dev
        if: github.event_name == 'issue_comment'
        uses: actions/github-script@v7
        with:
          script: |
            const comment_id = Number('${{ needs.build.outputs.comment_id }}');
            const runUrl = `${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${process.env.GITHUB_RUN_ID}`;
            const body = [
              `🚀 **Dev deploy in progress**`,
              `Run: ${runUrl}`,
              '',
              '**Status:** 🚢 Deploying docker-compose (dev)…',
              '',
              '- [x] Queued',
              '- [x] Started',
              '- [x] Image built',
              '- [x] Pushed',
              '- [ ] Deployed',
            ].join('\n');
            await github.rest.issues.updateComment({ owner: context.repo.owner, repo: context.repo.repo, comment_id, body });
  
      - name: Checkout repository
        if: github.event.issue.number != null
        uses: actions/checkout@v4
        with:
          ref: ${{ format('refs/pull/{0}/head', github.event.issue.number) }}
          fetch-depth: 0
  
      - name: Set up SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SERVER_HOST_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa 
  
      - name: Add remote host to known_hosts
        run: |
          ssh-keyscan -H ${{ secrets.SERVER_HOST_IP }} >> ~/.ssh/known_hosts
  
      - name: Set up Docker context for dev
        run: |
          docker context create dev-server \
            --docker "host=ssh://${{ secrets.SERVER_HOST_USER }}@${{ secrets.SERVER_HOST_IP }}" \
            --description "Dev server context"
          docker context use dev-server
  
      - name: Deploy to Remote Dev Server
        run: |
          VERSION_TAG=$(git rev-parse --short HEAD)
          echo "Deploying to Dev Server..."
          docker compose -f docker-compose.dev.yml up -d --build --no-deps --force-recreate
  
      - name: Finish status — success
        if: github.event_name == 'issue_comment' && success()
        uses: actions/github-script@v7
        with:
          script: |
            const comment_id = Number('${{ needs.build.outputs.comment_id }}');
            const runUrl = `${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${process.env.GITHUB_RUN_ID}`;
            const body = [
              `✅ **Dev deploy succeeded**`,
              `Run: ${runUrl}`,
              '',
              '**Status:** Done',
              '',
              '- [x] Build & push',
              '- [x] Deploy to dev',
            ].join('\n');
            await github.rest.issues.updateComment({ owner: context.repo.owner, repo: context.repo.repo, comment_id, body });
            await github.rest.reactions.createForIssueComment({
              owner: context.repo.owner, repo: context.repo.repo,
              comment_id: context.payload.comment.id, content: 'rocket'
            });
  
      - name: Finish status — failure
        if: github.event_name == 'issue_comment' && failure()
        uses: actions/github-script@v7
        with:
          script: |
            const comment_id = Number('${{ needs.build.outputs.comment_id }}');
            const runUrl = `${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${process.env.GITHUB_RUN_ID}`;
            const body = [
              `❌ **Dev deploy failed**`,
              `Run: ${runUrl}`,
              '',
              '**Status:** Failed — check logs in the run link above.`,
              '',
              '- [x] Build & push',
              '- [x] Start deploy',
              '- [ ] Completed',
            ].join('\n');
            await github.rest.issues.updateComment({ owner: context.repo.owner, repo: context.repo.repo, comment_id, body });
            await github.rest.reactions.createForIssueComment({
              owner: context.repo.owner, repo: context.repo.repo,
              comment_id: context.payload.comment.id, content: '-1'
            });
  
    env:
      VERSION_TAG: ${{ github.sha }}
      TOKEN: ${{ secrets.TOKEN }}

